// <auto-generated />
using System;
using Autopick.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Autopick.Api.Migrations
{
    [DbContext(typeof(AutopickDBContext))]
    partial class AutopickDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("Autopick.Api.Domain.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Email");

                    b.HasKey("Id");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Autopick.Api.Domain.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("Autopick.Api.Domain.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("Date");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ModalityId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ModalityId");

                    b.ToTable("Match", (string)null);
                });

            modelBuilder.Entity("Autopick.Api.Domain.Modality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(240)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Modality", (string)null);
                });

            modelBuilder.Entity("Autopick.Api.Domain.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("BirthDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("Autopick.Api.Domain.PlayerOverall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ModalityId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Overall")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ModalityId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerOverall", (string)null);
                });

            modelBuilder.Entity("Autopick.Api.Domain.PlayerSkillRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ModalityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerOverallId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ModalityId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerOverallId");

                    b.HasIndex("SkillId");

                    b.ToTable("PlayerSkillRating", (string)null);
                });

            modelBuilder.Entity("Autopick.Api.Domain.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(240)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModalityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("ModalityId");

                    b.ToTable("Skill", (string)null);
                });

            modelBuilder.Entity("Autopick.Api.Domain.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ModalityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Name");

                    b.Property<int>("Overall")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ModalityId");

                    b.ToTable("Team", (string)null);
                });

            modelBuilder.Entity("PlayerGroup", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.HasKey("GroupId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerGroup");
                });

            modelBuilder.Entity("PlayerTeam", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("TEXT");

                    b.HasKey("PlayerId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("PlayerTeam");
                });

            modelBuilder.Entity("TeamMatch", b =>
                {
                    b.Property<Guid>("MatchId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("TEXT");

                    b.HasKey("MatchId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamMatch");
                });

            modelBuilder.Entity("Autopick.Api.Domain.Group", b =>
                {
                    b.HasOne("Autopick.Api.Domain.Account", "Account")
                        .WithMany("Groups")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Autopick.Api.Domain.Match", b =>
                {
                    b.HasOne("Autopick.Api.Domain.Group", "Group")
                        .WithMany("Matches")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autopick.Api.Domain.Modality", "Modality")
                        .WithMany("Matches")
                        .HasForeignKey("ModalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Modality");
                });

            modelBuilder.Entity("Autopick.Api.Domain.PlayerOverall", b =>
                {
                    b.HasOne("Autopick.Api.Domain.Modality", "Modality")
                        .WithMany("PlayerOveralls")
                        .HasForeignKey("ModalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autopick.Api.Domain.Player", "Player")
                        .WithMany("PlayerOveralls")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modality");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Autopick.Api.Domain.PlayerSkillRating", b =>
                {
                    b.HasOne("Autopick.Api.Domain.Modality", null)
                        .WithMany("PlayerRatings")
                        .HasForeignKey("ModalityId");

                    b.HasOne("Autopick.Api.Domain.Player", null)
                        .WithMany("PlayerRatings")
                        .HasForeignKey("PlayerId");

                    b.HasOne("Autopick.Api.Domain.PlayerOverall", "PlayerOverall")
                        .WithMany("PlayerSkillRatings")
                        .HasForeignKey("PlayerOverallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autopick.Api.Domain.Skill", "Skill")
                        .WithMany("PlayerRatings")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerOverall");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Autopick.Api.Domain.Skill", b =>
                {
                    b.HasOne("Autopick.Api.Domain.Modality", "Modality")
                        .WithMany("Skills")
                        .HasForeignKey("ModalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modality");
                });

            modelBuilder.Entity("Autopick.Api.Domain.Team", b =>
                {
                    b.HasOne("Autopick.Api.Domain.Modality", "Modality")
                        .WithMany("Teams")
                        .HasForeignKey("ModalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modality");
                });

            modelBuilder.Entity("PlayerGroup", b =>
                {
                    b.HasOne("Autopick.Api.Domain.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autopick.Api.Domain.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerTeam", b =>
                {
                    b.HasOne("Autopick.Api.Domain.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autopick.Api.Domain.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamMatch", b =>
                {
                    b.HasOne("Autopick.Api.Domain.Match", null)
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autopick.Api.Domain.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Autopick.Api.Domain.Account", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Autopick.Api.Domain.Group", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Autopick.Api.Domain.Modality", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("PlayerOveralls");

                    b.Navigation("PlayerRatings");

                    b.Navigation("Skills");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Autopick.Api.Domain.Player", b =>
                {
                    b.Navigation("PlayerOveralls");

                    b.Navigation("PlayerRatings");
                });

            modelBuilder.Entity("Autopick.Api.Domain.PlayerOverall", b =>
                {
                    b.Navigation("PlayerSkillRatings");
                });

            modelBuilder.Entity("Autopick.Api.Domain.Skill", b =>
                {
                    b.Navigation("PlayerRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
